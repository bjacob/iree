// Swizzling code for a kernel using 1x1 mfma_f32_16x16x4f32:
// https://github.com/bjacob/hip-matmul/blob/9ceb3c89763d9127573f49a3cf2000936bec3bc4/matmul.hip#L567

// Swizzling code for the "A" matrix, i.e. the LHS.
func.func @swizzle_1x1_mfma_f32_16x16x4f32_A_matrix() {
  %src = util.unfoldable_constant dense<
      // array.py 16,4 0,1 f32
      [[ 0.,  1.,  2.,  3.],
       [ 4.,  5.,  6.,  7.],
       [ 8.,  9., 10., 11.],
       [12., 13., 14., 15.],
       [16., 17., 18., 19.],
       [20., 21., 22., 23.],
       [24., 25., 26., 27.],
       [28., 29., 30., 31.],
       [32., 33., 34., 35.],
       [36., 37., 38., 39.],
       [40., 41., 42., 43.],
       [44., 45., 46., 47.],
       [48., 49., 50., 51.],
       [52., 53., 54., 55.],
       [56., 57., 58., 59.],
       [60., 61., 62., 63.]] 
  > : tensor<16x4xf32>
  %expected = util.unfoldable_constant dense<
      // array.py 16,4 1,0 f32
      [[ 0.,  4.,  8., 12., 16., 20., 24., 28., 32., 36., 40., 44., 48., 52., 56., 60.],
       [ 1.,  5.,  9., 13., 17., 21., 25., 29., 33., 37., 41., 45., 49., 53., 57., 61.],
       [ 2.,  6., 10., 14., 18., 22., 26., 30., 34., 38., 42., 46., 50., 54., 58., 62.],
       [ 3.,  7., 11., 15., 19., 23., 27., 31., 35., 39., 43., 47., 51., 55., 59., 63.]]
  > : tensor<4x16xf32>
  %expand = tensor.expand_shape %src [[0], [1]] output_shape [16, 4] : tensor<16x4xf32> into tensor<16x4xf32>
  %transpose_init = tensor.empty() : tensor<4x16xf32>
  %transpose = linalg.transpose
    ins(%expand : tensor<16x4xf32>)
    outs(%transpose_init : tensor<4x16xf32>)
    permutation = [1, 0]
  check.expect_eq(%transpose, %expected) : tensor<4x16xf32>
  return
}

// Swizzling code for the "C" matrix, i.e. the accumulator/output.
func.func @swizzle_1x1_mfma_f32_16x16x4f32_C_matrix() {
  %src = util.unfoldable_constant dense<
      // array.py 16,16 0,1 f32
      [[  0.,   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.],
       [ 16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,  27.,  28.,  29.,  30.,  31.],
       [ 32.,  33.,  34.,  35.,  36.,  37.,  38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.],
       [ 48.,  49.,  50.,  51.,  52.,  53.,  54.,  55.,  56.,  57.,  58.,  59.,  60.,  61.,  62.,  63.],
       [ 64.,  65.,  66.,  67.,  68.,  69.,  70.,  71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,  79.],
       [ 80.,  81.,  82.,  83.,  84.,  85.,  86.,  87.,  88.,  89.,  90.,  91.,  92.,  93.,  94.,  95.],
       [ 96.,  97.,  98.,  99., 100., 101., 102., 103., 104., 105., 106., 107., 108., 109., 110., 111.],
       [112., 113., 114., 115., 116., 117., 118., 119., 120., 121., 122., 123., 124., 125., 126., 127.],
       [128., 129., 130., 131., 132., 133., 134., 135., 136., 137., 138., 139., 140., 141., 142., 143.],
       [144., 145., 146., 147., 148., 149., 150., 151., 152., 153., 154., 155., 156., 157., 158., 159.],
       [160., 161., 162., 163., 164., 165., 166., 167., 168., 169., 170., 171., 172., 173., 174., 175.],
       [176., 177., 178., 179., 180., 181., 182., 183., 184., 185., 186., 187., 188., 189., 190., 191.],
       [192., 193., 194., 195., 196., 197., 198., 199., 200., 201., 202., 203., 204., 205., 206., 207.],
       [208., 209., 210., 211., 212., 213., 214., 215., 216., 217., 218., 219., 220., 221., 222., 223.],
       [224., 225., 226., 227., 228., 229., 230., 231., 232., 233., 234., 235., 236., 237., 238., 239.],
       [240., 241., 242., 243., 244., 245., 246., 247., 248., 249., 250., 251., 252., 253., 254., 255.]]
  > : tensor<16x16xf32>
  %expected = util.unfoldable_constant dense<
      // array.py 4,4,16 0,2,1 f32
      [[[  0.,  16.,  32.,  48.],
        [  1.,  17.,  33.,  49.],
        [  2.,  18.,  34.,  50.],
        [  3.,  19.,  35.,  51.],
        [  4.,  20.,  36.,  52.],
        [  5.,  21.,  37.,  53.],
        [  6.,  22.,  38.,  54.],
        [  7.,  23.,  39.,  55.],
        [  8.,  24.,  40.,  56.],
        [  9.,  25.,  41.,  57.],
        [ 10.,  26.,  42.,  58.],
        [ 11.,  27.,  43.,  59.],
        [ 12.,  28.,  44.,  60.],
        [ 13.,  29.,  45.,  61.],
        [ 14.,  30.,  46.,  62.],
        [ 15.,  31.,  47.,  63.]],

       [[ 64.,  80.,  96., 112.],
        [ 65.,  81.,  97., 113.],
        [ 66.,  82.,  98., 114.],
        [ 67.,  83.,  99., 115.],
        [ 68.,  84., 100., 116.],
        [ 69.,  85., 101., 117.],
        [ 70.,  86., 102., 118.],
        [ 71.,  87., 103., 119.],
        [ 72.,  88., 104., 120.],
        [ 73.,  89., 105., 121.],
        [ 74.,  90., 106., 122.],
        [ 75.,  91., 107., 123.],
        [ 76.,  92., 108., 124.],
        [ 77.,  93., 109., 125.],
        [ 78.,  94., 110., 126.],
        [ 79.,  95., 111., 127.]],

       [[128., 144., 160., 176.],
        [129., 145., 161., 177.],
        [130., 146., 162., 178.],
        [131., 147., 163., 179.],
        [132., 148., 164., 180.],
        [133., 149., 165., 181.],
        [134., 150., 166., 182.],
        [135., 151., 167., 183.],
        [136., 152., 168., 184.],
        [137., 153., 169., 185.],
        [138., 154., 170., 186.],
        [139., 155., 171., 187.],
        [140., 156., 172., 188.],
        [141., 157., 173., 189.],
        [142., 158., 174., 190.],
        [143., 159., 175., 191.]],

       [[192., 208., 224., 240.],
        [193., 209., 225., 241.],
        [194., 210., 226., 242.],
        [195., 211., 227., 243.],
        [196., 212., 228., 244.],
        [197., 213., 229., 245.],
        [198., 214., 230., 246.],
        [199., 215., 231., 247.],
        [200., 216., 232., 248.],
        [201., 217., 233., 249.],
        [202., 218., 234., 250.],
        [203., 219., 235., 251.],
        [204., 220., 236., 252.],
        [205., 221., 237., 253.],
        [206., 222., 238., 254.],
        [207., 223., 239., 255.]]] 
  > : tensor<4x16x4xf32>
  %expand = tensor.expand_shape %src [[0, 1], [2]] output_shape [4, 4, 16] : tensor<16x16xf32> into tensor<4x4x16xf32>
  %transpose_init = tensor.empty() : tensor<4x16x4xf32>
  %transpose = linalg.transpose
    ins(%expand : tensor<4x4x16xf32>)
    outs(%transpose_init : tensor<4x16x4xf32>)
    permutation = [0, 2, 1]
  check.expect_eq(%transpose, %expected) : tensor<4x16x4xf32>
  return
}
